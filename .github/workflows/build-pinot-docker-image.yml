name: Pinot Docker Image Build and Publish (by Yape)

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - qa
          - stg
          - prd
      gitUrl:
        default: "https://github.com/yaperos/pinot.git"
        required: true
      commit:
        default: "master"
        required: true
      platform:
        default: "linux/amd64"
        required: true
      dockerImageName:
        default: "yaperos/pinot"
        required: true
      tags:
        default: ""
        required: true
      unit:
        type: string
        default: "yape3"
      domain:
        type: string
        default: "yape"

jobs:
  build:
    environment:
      name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Download Scripts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: yaperos/reusable-workflows
          token: ${{ secrets.GH_PAT }}
          path: "./scripts_workflow"
          ref: main
      - name: Setup VPN Script
        run: |
          cp ./scripts_workflow/.github/scripts/vpn_connect.sh /tmp/vpn_connect.sh; chmod +x /tmp/vpn_connect.sh
          cp ./scripts_workflow/.github/vpn/tools_techtools@yape.com.pe_AccessTools_linux.ovpn /tmp/vpn.ovpn
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Set Global Environment Name
        run: |
          echo "GLOBAL_ENVIRONMENT_NAME=" >> $GITHUB_ENV
          if [ "${{ inputs.unit }}" = "yape3" ]; then
            echo "GLOBAL_ENVIRONMENT_NAME=$(echo ${{ inputs.environment }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          elif [ "${{ inputs.unit }}" = "yape3mp" ]; then
            echo "GLOBAL_ENVIRONMENT_NAME=$(echo ${{ inputs.environment }}_${{ inputs.unit }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          fi
      - name: Connect VPN
        timeout-minutes: 5
        env:
          VPN_CA_CRT: ${{ secrets[format('VPN_CA_CRT_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          VPN_USER_CRT: ${{ secrets[format('VPN_USER_CRT_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          VPN_USER_KEY: ${{ secrets[format('VPN_USER_KEY_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          VPN_SECRET_USERNAME_PASSWORD: ${{ secrets[format('VPN_SECRET_USERNAME_PASSWORD_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          VPN_TLS_KEY: ${{ secrets[format('VPN_TLS_KEY_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          VPN_HOST_IP: ${{ secrets[format('VPN_HOST_IP_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          sed -i "s/{{YAPE_VPN_RESOLVECTL}}/${{ vars[format('YAPE_VPN_RESOLVECTL_{0}', env.GLOBAL_ENVIRONMENT_NAME)] }}/g" /tmp/vpn_connect.sh
          /tmp/vpn_connect.sh
      - name: Container Registry Login #####
        if: ${{ inputs.unit == 'yape3' || inputs.unit == 'yape3mp' }}
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c # v2.0
        with:
          login-server: acr${{ inputs.unit }}eastus${{ inputs.environment }}.azurecr.io
          username: ${{ secrets[format('AZURE_ACR_USERNAME_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
          password: ${{ secrets[format('AZURE_ACR_PASSWORD_{0}', env.GLOBAL_ENVIRONMENT_NAME )] }}
      - uses: docker/setup-qemu-action@v3
        name: Set up QEMU
      - uses: docker/setup-buildx-action@v3
        name: Set up Docker Buildx
      - uses: actions/checkout@v4
      - name: Build and push the Docker image
        env:
          DOCKER_FILE_BASE_DIR: "docker/images/pinot"
          DOCKER_IMAGE_NAME: ${{ github.event.inputs.dockerImageName }}
          BUILD_PLATFORM: ${{ github.event.inputs.platform }}
          PINOT_GIT_URL: ${{ github.event.inputs.gitUrl }}
          PINOT_BRANCH: ${{ github.event.inputs.commit }}
          TAGS: ${{ github.event.inputs.tags }}
        run: .github/workflows/scripts/docker/.pinot_docker_image_build_and_push.sh